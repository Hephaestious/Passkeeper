using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace PasswordManager
{
    public class Profile
    {
        public string ProfileName;
        public bool LoggedIn = false;
        private Database.DBProfile _dbProfile;
        private string _phraseHash;

        public Profile(Database.DBProfile dbProfile)
        {
            _dbProfile = dbProfile;
            ProfileName = _dbProfile.Name;
        }

        public Database.Account AddAccount(string servicename, string username, string password)
        {
            // If password was generated by the program we don't need to save it, just the variables we can use to regenerate it
            var encryptedpassword = (password == null) ? null : Crypto.EncryptStringAES(password, _phraseHash); 

            var newAccount = new Database.Account(servicename, username, encryptedpassword); // Create account object

            // Make sure profile does not already have an account with that name
            if (_dbProfile.Accounts.Any(a => (a.Username == username) && (a.ServiceName == servicename))) return null;
            // Add account to profile
            _dbProfile.Accounts.Add(newAccount); // Add account to profile objects list
            Database.SaveProfile(_dbProfile); // Save account in database
            return newAccount;
        }

        public bool Login(string password)
        {
            var passwordHash = Crypto.GenerateHash(password); // Get password hash
            try
            {
                var encryptedphrasehash = Crypto.DecryptStringAES(_dbProfile.EncryptedPhraseHash, passwordHash); // Try to decrypt profile with given password, throws if invalid
                _phraseHash = JsonConvert.DeserializeObject<Database.PhraseHashJson>(encryptedphrasehash).PhraseHash; // Get phrase hash from decrypted profile
                LoggedIn = true;
                return true;
            }
            catch (Exception) // Wrong password
            {
                return false;
            }
        }

        public void Logout()
        {
            RNGCryptoServiceProvider rngCsp = new RNGCryptoServiceProvider();
            for (var i = 0; i < 3; i++)
            {
                byte[] data = new byte[(int) Math.Round((double) (_phraseHash.Count()))];
                rngCsp.GetBytes(data);
                int randomNum = BitConverter.ToInt32(data, 0);
                _phraseHash = randomNum.ToString();
            }
            LoggedIn = false;
            _phraseHash = null;
        }

        public string GetAccountPassword(int accountIndex)
        {
            Database.Account account = _dbProfile.Accounts[accountIndex];
            // If encrypted password is null the password was generated with the program so we just re-generate it
            // If it isn't null the password was given by the user so we need to decrypt it
            return (account.EncryptedPassword == null) 
                ? Crypto.GenerateHashWithSeed(account.ServiceName + account.Username, _phraseHash)
                : Crypto.DecryptStringAES(account.EncryptedPassword, _phraseHash); 
        }

        public void Delete()
        {
            if (LoggedIn) Logout(); // Erase phrase hash 
            Database.DeleteProfile(ProfileName);
        }

        public List<Database.Account> GetAccounts()
        {
            return _dbProfile.Accounts;
        }

        public void DeleteAccount(int index)
        {
            var accountRemove = _dbProfile.Accounts[index];
            _dbProfile.Accounts.Remove(accountRemove);
            Database.SaveProfile(_dbProfile);
        }
    }
}
